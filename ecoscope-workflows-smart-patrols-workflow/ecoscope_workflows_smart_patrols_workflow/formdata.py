# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class WorkflowDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="The name of your workflow", title="Name")
    description: str = Field(..., description="A description", title="Description")
    image_url: Optional[str] = Field("", description="An image url", title="Image Url")


class TimeRange(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    since: AwareDatetime = Field(..., description="The start time", title="Since")
    until: AwareDatetime = Field(..., description="The end time", title="Until")


class PatrolObs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ca_uuid: str = Field(..., description="Conservation Area UUID", title="Ca Uuid")
    language_uuid: str = Field(..., description="Language UUID", title="Language Uuid")


class PatrolTraj(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    max_length_meters: Optional[float] = Field(10000, title="Max Length Meters")
    max_time_secs: Optional[float] = Field(3600, title="Max Time Secs")
    max_speed_kmhr: Optional[float] = Field(120, title="Max Speed Kmhr")


class FetchAndPreprocessPatrolObservations(BaseModel):
    patrol_obs: Optional[PatrolObs] = Field(
        None, title="Get Patrol Observations from SMART"
    )
    patrol_traj: Optional[PatrolTraj] = Field(
        None, title="Transform Relocations to Trajectories"
    )


class PatrolEvents(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ca_uuid: str = Field(..., description="Conservation Area UUID", title="Ca Uuid")
    language_uuid: str = Field(..., description="Language UUID", title="Language Uuid")


class FetchAndPreprocessPatrolEvents(BaseModel):
    patrol_events: Optional[PatrolEvents] = Field(
        None, title="Get Patrol Events from SMART"
    )


class TimeInterval(str, Enum):
    year = "year"
    month = "month"
    week = "week"
    day = "day"
    hour = "hour"


class PatrolEventsBarChart1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    time_interval: TimeInterval = Field(
        ..., description="Sets the time interval of the x axis.", title="Time Interval"
    )


class PatrolEventsBarChart(BaseModel):
    patrol_events_bar_chart: Optional[PatrolEventsBarChart1] = Field(
        None, title="Draw Time Series Bar Chart for Patrols Events"
    )


class Td(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pixel_size: Optional[float] = Field(
        250.0, description="Raster pixel size in meters.", title="Pixel Size"
    )


class TimeDensityMap(BaseModel):
    td: Optional[Td] = Field(None, title="Calculate Time Density from Trajectory")


class SMARTConnection(BaseModel):
    name: str = Field(..., title="Connection Name")


class Grouper(BaseModel):
    index_name: str = Field(..., title="Index Name")


class TemporalGrouper(BaseModel):
    temporal_index: str = Field(..., title="Temporal Index")


class SmartClientName(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data_source: SMARTConnection = Field(
        ...,
        description="Select one of your configured data sources by name.",
        title="Data Source",
    )


class Groupers(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    groupers: List[Union[Grouper, TemporalGrouper]] = Field(
        ...,
        description="            Index(es) and/or column(s) to group by, along with\n            optional display names and help text.\n            ",
        title="Groupers",
    )


class FormData(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    workflow_details: Optional[WorkflowDetails] = Field(
        None, title="Set Workflow Details"
    )
    smart_client_name: Optional[SmartClientName] = Field(
        None, title="Select Smart Connection"
    )
    groupers: Optional[Groupers] = Field(None, title="Set Groupers")
    time_range: Optional[TimeRange] = Field(None, title="Set Time Range Filter")
    Fetch_and_preprocess_patrol_observations: Optional[
        FetchAndPreprocessPatrolObservations
    ] = Field(
        None,
        alias="Fetch and preprocess patrol observations",
        description="Fetch patrol observations from SMART, preprocess them into trajectories, and add a temporal index.",
    )
    Fetch_and_preprocess_patrol_events: Optional[FetchAndPreprocessPatrolEvents] = (
        Field(
            None,
            alias="Fetch and preprocess patrol events",
            description="Fetch patrol events from SMART, filter them, and add a temporal index.",
        )
    )
    Patrol_events_bar_chart: Optional[PatrolEventsBarChart] = Field(
        None,
        alias="Patrol events bar chart",
        description="Create the patrol events bar chart.",
    )
    Time_Density_Map: Optional[TimeDensityMap] = Field(
        None,
        alias="Time Density Map",
        description="Calculate time density from patrol trajectories and display it on a map.",
    )
